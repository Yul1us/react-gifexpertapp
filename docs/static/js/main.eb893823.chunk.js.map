{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAuBA,OAGI,aAFA,CAEA,QAAMC,SAhBW,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAQlB,SAKI,uBACIO,KAAK,OACLC,MAAOT,EAEPU,SAjCc,SAACP,GAGvBF,EAAcE,EAAEQ,OAAOF,a,sCCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAWH,GAH9C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAGXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAdvB,kBAsBZM,GAtBY,4CAAH,sDC8DXO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAMtC,OAGI,cADA,CACA,OAAKc,UAAU,yCAAf,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCvEJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SA4EtB,EC7EwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8CA,OAxCAC,qBAAW,WAEPxB,EAASC,GACRwB,MAAM,SAAAC,GAeHC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAOlB,CAAEpB,IAYEqB,ED6BwBO,CAAc5B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAMpB,OACI,qCAII,oBAAKJ,UAAU,yCAAf,SAA0DhB,IAIxDoB,GAAW,mBAAGJ,UAAU,wCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEvC7BkB,EA9DM,WAIjB,MAAoC3C,mBAAS,CAAE,cAA/C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAoBA,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAE/B,uBAIA,6BASQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADNA,Y,MC1CjC+B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.eb893823.chunk.js","sourcesContent":["\r\n//racp\r\nimport React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    // const [inputValue, setInputValue] = useState('Hola mundo')\r\n    const [inputValue, setInputValue] = useState('')\r\n    //para manejar los cambios en el input\r\n    const handleInputChange = (e) => {\r\n\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    //Para el manejo de Formularios -> form\r\n    //de modo que no se cargue toda la pagina nuevamente con los cambios\r\n    const handleSubmit = (e) => {\r\n        //Para prevenir la carga de toda la pagina\r\n        e.preventDefault();\r\n        // console.log('Submit done...')\r\n        \r\n        if (inputValue.trim().length > 2 ) {\r\n\r\n            setCategories( cats => [inputValue, ...cats ] );\r\n            setInputValue('');  // inicializa nuevamente el valor\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        // <>\r\n        \r\n        <form onSubmit={ handleSubmit }>\r\n            {/* Si usamos form -> no usamos el fracment <> </> */}\r\n            {/* inputValue = es el valor que la persona escribio... */}\r\n            {/* <h2>Add Category</h2> */}\r\n            {/* <h1>{inputValue}</h1> */}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                // onChange={(e) => console.log(e)}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n        // </>\r\n    )\r\n}\r\nAddCategory.propTypes = { \r\n    setCategories: PropTypes.func.isRequired\r\n }","\r\n\r\n    //Al recibir la category\r\n    //Con ella haremos un peticion hhttps://\r\n\r\n    //Esta funcion reemplazo todo un bloque de codigo en el componente: GifGrid\r\n    export const getGifs = async( category ) => {\r\n\r\n        // const url = 'https://api.giphy.com/v1/gifs/search?q=Rick%20and%20Morty&limit=10&api_key=esu9sAL8Fr2087x4OfNMytj9jkZ7rCJD';\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category ) }&limit=10&api_key=esu9sAL8Fr2087x4OfNMytj9jkZ7rCJD`;\r\n        const resp = await fetch( url );\r\n        const {data} = await resp.json();\r\n\r\n        //aca transformamos lo que recibimos de category\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                //Este caracter ? -> es un condicional\r\n                //Si vienen las imagenes entonces lo usa\r\n                url: img.images?.downsized_medium.url,\r\n\r\n            }\r\n\r\n        } )\r\n        // console.log(data);\r\n        // console.log(gifs);\r\n        // setImages(gifs);\r\n        return gifs;\r\n\r\n    }\r\n","import React from 'react'\r\n\r\n//Ver. 1\r\n// export const GifGridItem = ( img ) => {\r\n\r\n//     console.log(img);\r\n\r\n//     return (\r\n//         <div>\r\n//             { img.title }\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n//Ver. 2\r\n// export const GifGridItem = ( props ) => {\r\n\r\n//     console.log(props);\r\n//     //Se ve así:\r\n//     // {id: 'VXJWhaO7afRe', \r\n//     // title: 'One Punch Man GIF', \r\n//     // url: 'https://media4.giphy.com/media/VXJWhaO7afRe/giphy.…9ei2xcrb2pvo1l1dq3taqu90qga41b&rid=giphy.gif&ct=g'}\r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             {/* { img.title } */}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n//Ver. 3 desestructurando -> props en: { id, title, url } \r\n// export const GifGridItem = ( { id, title, url } ) => {\r\n\r\n//     console.log(  id, title, url  );\r\n//     //Se ve así:\r\n//     // yo3TC0yeHd53G \r\n//     // saitama GIF \r\n//     // https://media1.giphy.com/media/yo3TC0yeHd53G/giphy.gif?cid=4ec6a343guioud4fh89ei2xcrb2pvo1l1dq3taqu90qga41b&rid=giphy.gif&ct=g\r\n\r\n\r\n//     return (\r\n//         <div>\r\n//             {/* { img.title } */}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n//Ver. 4 para verlo en el browser \r\n// export const GifGridItem = ( { id, title, url } ) => {\r\n\r\n//     // console.log(  id, title, url  );\r\n//     //Se ven las imagenes:\r\n//     //despues de destructurar ya se pueden usar las propiedades \r\n//     //siempre es bueno colocar el atributo   alt={  }\r\n//     return (\r\n//         <div>\r\n//             {/* { img.title } */}\r\n//             <img src={ url } alt={ title } />\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n\r\n//Ver. 5 usando estilos con una clase: card en el <div className='card'> \r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n\r\n    // console.log(  id, title, url  );\r\n    //Se ven las imagenes:\r\n    //despues de destructurar ya se pueden usar las propiedades \r\n    //siempre es bueno colocar el atributo   alt={  }\r\n    return (\r\n\r\n        // USANDO ANIMACIONES >     https://animate.style/\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            {/* { img.title } */}\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // const [images, setImages] = useState([]);\r\n\r\n\r\n    // const [count, setCount] = useState(0);\r\n\r\n\r\n    //Este codigo se ejecuta cada vez que cambie la category\r\n    //Ver 1\r\n    // useEffect( () => {\r\n\r\n    //     //Ver 1\r\n    //     // getGifs();\r\n    //     //Ver 2\r\n    //     // getGifs( category ).then( imgs => setImages( imgs ) )\r\n\r\n    //     //Ver 3\r\n    //     getGifs( category )\r\n    //     .then( setImages )\r\n\r\n    // }, []);\r\n\r\n    \r\n    // useEffect( () => {\r\n    //     //Ver 1\r\n    //     // getGifs();\r\n    //     //Ver 2\r\n    //     // getGifs( category ).then( imgs => setImages( imgs ) )\r\n\r\n    //     //Ver 3\r\n    //     getGifs( category )\r\n    //     .then( setImages );\r\n    // }, [ category ]);\r\n\r\n    //Al recibir la category\r\n    //Con ella haremos un peticion hhttps://\r\n\r\n    //Este codigo fue reemplazado por la funcion: getGifs\r\n    // const getGifs = async() => {\r\n\r\n    //     // const url = 'https://api.giphy.com/v1/gifs/search?q=Rick%20and%20Morty&limit=10&api_key=esu9sAL8Fr2087x4OfNMytj9jkZ7rCJD';\r\n    //     const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category ) }&limit=10&api_key=esu9sAL8Fr2087x4OfNMytj9jkZ7rCJD`;\r\n    //     const resp = await fetch( url );\r\n    //     const {data} = await resp.json();\r\n\r\n    //     //aca transformamos lo que recibimos de category\r\n    //     const gifs = data.map( img => {\r\n    //         return {\r\n    //             id: img.id,\r\n    //             title: img.title,\r\n    //             //Este caracter ? -> es un condicional\r\n    //             //Si vienen las imagenes entonces lo usa\r\n    //             url: img.images?.downsized_medium.url,\r\n\r\n    //         }\r\n\r\n    //     } )\r\n    //     // console.log(data);\r\n    //     console.log(gifs);\r\n    //     setImages(gifs);\r\n\r\n    // }\r\n\r\n\r\n\r\n    //Apartado# 78\r\n    //Fetch\r\n\r\n    // const state = useFetchGifs();\r\n    // console.log(state);\r\n\r\n\r\n    // export const {data, loading} = useFetchGifs( category );\r\n    // console.log(data);\r\n    // console.log(loading);\r\n\r\n    const {data:images, loading} = useFetchGifs( category);\r\n    \r\n\r\n    //llamando la funcion\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n        \r\n        \r\n        \r\n            <h3  className='card animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            {/* Apartado #78 */}\r\n            {/* { loading ? 'Cargando...' : 'Data Cargada'} */}\r\n            { loading && <p className='card animate__animated animate__flash'>Loading</p>}\r\n            <div className='card-grid'>\r\n                    {\r\n                        images.map( img  => (\r\n                            <GifGridItem \r\n                                key = { img.id }\r\n                                { ...img } \r\n\r\n                            />        \r\n                        ))\r\n\r\n                    }\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n                {/* <h3> {count} </h3>\r\n                <button onClick={ ()=> setCount(count + 1) }></button> */}\r\n                \r\n\r\n                {/* <ol> */}\r\n                    {/* <li>item</li> */}\r\n\r\n\r\n                    {/* Funcion de Javascript */}\r\n                    {/* {\r\n\r\n                        // // Version #1: Codigo sencillo\r\n                        // // images.map( img => (\r\n                        // //     <li key={ img.id }  >{ img.title }</li>\r\n                        // // ))\r\n\r\n                        // // Version #2: Codigo desestructurado, para en vez de colocar {img.id} -> {id}\r\n                        // // images.map( ({ id, title}) => (\r\n                        // //     <li key={ id }  >{ title }</li>\r\n                        // // ))\r\n\r\n\r\n                        // // Version #3: usando una funcion:\r\n                        // // Recordar primero importar la funcion: GifGridItem\r\n                        // //import { GifGridItem } from './GifGridItem';\r\n\r\n                        // // images.map( img  => (\r\n                        // //     <GifGridItem \r\n                        // //         key = { img.id }\r\n                        // //         img={ img } \r\n\r\n                        // //     />        \r\n                        // // ))\r\n\r\n\r\n                        // // Version #4: operador espect { ...img }  en ves de: img={ img }\r\n                        // data.map( img  => (\r\n                        //     <GifGridItem \r\n                        //         key = { img.id }\r\n                        //         { ...img } \r\n\r\n                        //     />        \r\n                        // ))\r\n\r\n\r\n                    } */}\r\n\r\n                {/* </ol> */}\r\n            {/* </div> */}\r\n            \r\n        </>\r\n    )\r\n}\r\n","\r\n\r\n// import React from 'react'\r\n\r\nimport { useState } from \"react\"\r\nimport { useEffect } from \"react/cjs/react.development\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n        .then( imgs => {\r\n\r\n            // setTimeout(() => {\r\n\r\n            //     console.log(imgs);\r\n            //     setState({\r\n            //         data: imgs,\r\n            //         loading: false\r\n            //     });\r\n                \r\n            // }, 3000);\r\n\r\n\r\n\r\n            //Sin TimeOut\r\n            console.log(imgs);\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n  \r\n                \r\n\r\n\r\n        })\r\n    }, [ category ]);\r\n\r\n\r\n\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     });\r\n    // }, 3000);\r\n\r\n    return state; //{data: [], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // const categories = [ 'One Punch','Samurai X','Dragon Ball' ];\r\n\r\n    //const [categories, setCategories] = useState([ 'One Punch','Samurai X','Dragon Ball' ]);\r\n    const [categories, setCategories] = useState([ 'One Punch' ]);\r\n    // const handleAdd = () =>{\r\n    //     //Como es un arreglo para adicionar un nuevo \r\n    //     //elemento se debe user la function 'push'\r\n\r\n    //     // el problema con el push es que:\r\n    //     //React no sabe que debe renderizar\r\n    //     // categories.push('Otro Super Heroe')\r\n    //     // console.log(categories);\r\n\r\n    //     //La solución esta en el setCategories\r\n    //     //usando el operador spread  [...] del apartado #16 de arreglos\r\n    //     //setCategories([...categories, 'Otro Super Héroe']);\r\n    //     //ó\r\n    //     //setCategories(['Otro Super Héroe', ...categories]);\r\n    //     //ó\r\n    //     // setCategories(cats => [...cats, 'Otro Super Héroe' ]);\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories }/>\r\n\r\n            <hr />\r\n\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */}\r\n\r\n            <ol>\r\n\r\n                {\r\n\r\n                    // categories.map( category => {\r\n                    //     return <li key={ category }> {category} </li>\r\n\r\n                    // })\r\n\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n\r\n                }\r\n\r\n            </ol>\r\n\r\n\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n//GitExpertApp\n//<h2>GifExpertApp</h2>\n//<hr />"],"sourceRoot":""}